----------------------------------------------------------------------------------------------------------------------
1+2. Why would you consider a Scripting language as JavaScript as your Backend Platform, and compare it to a strategy
for example Java/JAX-RS/Tomcat.
----------------------------------------------------------------------------------------------------------------------

-----Pros-----

- With a Java backend, you will usually still need Javascript for your frontend, meaning you will have to switch between
Java and JavaScript constantly. Using 1 language for both sides is simply easier, and makes it easier to migrate code.

- For using tools like Maven for a Java backend, you will need to specify it in the XML file. Everything is more
accessible with Node.

- JSON is a core part of JavaScript, so you don't need any additional libraries, or worry about formatting as much.

- Node.js is faster.

-----Cons-----

- Java has 20 years of experience when it comes to server-side programming. It is therefore way safer.

- Javascript might lack utility classes depending on what the desired program is. Java developers have invested
a lot of time into complex packages for more scientific work.

- Functions in JavaScript can be confusing when functions that don't get any answer return values such as undefined,
NaN and null.

- JavaScript is prone to deadlocks. If you don't write simple code and make sure that it works, the entire Server
might lock up as a result.

-----------------------------------------------------------------------------------------------------------------------
3. Node.js uses a Single Threaded Non-blocking strategy to handle asynchronous tasks. Explain strategies to
implement a Node.js based server architecture that still could take advantage of a multi-core Server.
-----------------------------------------------------------------------------------------------------------------------

Modules that enables "clustering" in Node.js runs as multiple single threaded processes under a "Master" Node.js
process. You start the main process called the "Master Process". The Master Process starts and manages other processes
called "Worker Processes", which do the actual work of handling requests.

In order to implement clustering in your Node.js application, you "simply" need to identify which portions of your code
is for the master, and which are for the workers.

-----------------------------------------------------------------------------------------------------------------------
5. Explain, using relevant examples, the Express concept; middleware.
-----------------------------------------------------------------------------------------------------------------------

-----Middleware-----
var express = require("express");
var app = express();

var fruits = [
    "Mango",
    "Apple",
    "Orange"
]

app.use("fruits/:name", function(req, res, next){
    if(fruits.contains(req.params.name)) {
        console.log('Fruit found:', req.params.name)
    }else{
        console.log('Fruit not found');
    }
    next();
}, function(req, res, next){
    console.log('Request: ', req.method);
    next();
});

-----------------------------------------------------------------------------------------------------------------------
6. Explain, using relevant examples, how to implement sessions, and the legal implications of doing this.
-----------------------------------------------------------------------------------------------------------------------

-----Basic session setup------
var express = require('express');
var app = express();

app.use(express.cookieParser());
app.use(express.session({secret: '420691337asd'}));

app.get('/SessionExample', function(req, res) {
    if(req.session.lastPage) {
        res.write('Last page was: ' + req.session.lastPage + '. ');
    }

    req.session.lastPage = '/SessionExample';
    res.send('Hello World');
});
-----------------------------------------------------------------------------------------------------------------------
7. Compare the express strategy toward (server side) templating with the one you used with Java on second semester.
-----------------------------------------------------------------------------------------------------------------------

The Express server side templating using different frameworks achieves the ability to combine web templates into
finished web pages. The work flow for this process goes like this: The controller is given data from the model, and
pass it on to the view, the view then sends data back to the controller, and then back to model.

On the second semester we used: Model -> Controller -> Servlet/JSP
Now we are using:               Model -> Controller/Router -> Jade/Handlebars etc.

-----------------------------------------------------------------------------------------------------------------------
8. Explain, using relevant examples, your strategy for implementing a REST-API with Node/Express and show how you can
"test" all the four CRUD operations programmatically using for example the Request package.
-----------------------------------------------------------------------------------------------------------------------

Start with:

var express    = require('express');
var app        = express();
var bodyParser = require('body-parser');

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

Registering all routes and endpoints under /api:

app.use('/api', router);

In order to test REST-API's I would use the request package, which works like Postman.

If I have a endpoint that looks like the one below, which fetches a random fruit, and assigns it to the variable "fruit".

router.get('/fruit/random', function(req,res,next){
    res.json({fruit : fruits.getRandomFruit()});
});

I would implement a request method in a separate JavaScript file.

var getRandom = {
    url: "http://localhost:3000/api/fruit/random", method: "GET",
    json : true
};

request(getFruit,function(error,res,body){
    console.log(body.fruit);
});

Put/Delete/Post:

router.post('/addFruit', function(req, res){
    fruits.addFruit(req.body.fruit);
    res.json({Message: "Fruit was added});
});

router.put('/fruit/:fruitid', function(req, res){
    var id = req.params.fruitid;
    fruit.allFruits[id] = req.body.fruit;
    res.json({reply: "Fruit: " + id + " was removed"});
});

router.delete('/fruit/:fruitid', function(req, res){
    var id = req.params.fruitid;
    fruits.deleteFruit(id);
    res.json({message: "Fruit: " + id + " was removed"});
});

-----------------------------------------------------------------------------------------------------------------------
9. Explain, using relevant examples, about testing JavaScript code, relevant packages (Mocha etc.) and how to test
asynchronous code.
-----------------------------------------------------------------------------------------------------------------------

Mocha: Testing framework.
Chai: Assertion framework.

-----AsyncMethod-----
exports.calc = function(n1,n2,callback){
    var result = n1+n2;
    callback(result);
    console.log(result)
}

----TestAsyncMethod----
var chai = require('chai');
var expect  = require('chai').expect;
var calculator = require('./AsyncMethod');

describe('Adds 2 numbers', function(){
    it("Should return 10", function(done){
        calculator.calc(5,5, function(res){
            expect(res).to.be.equal(10);
            done();
        });
    });
});

-----------------------------------------------------------------------------------------------------------------------
10. Explain, using relevant examples, different ways to mock out databases, HTTP-request etc.
-----------------------------------------------------------------------------------------------------------------------

Currently don't have the knowledge to be able to mock out a database, but a request is mocked out in the example below

Modules required:
Mocha: Testing framework.
Chai: Assertion framework.
Nock: Mocking framework.
Request: Request framework.

-----jokeModule.js-----
var request = require("request");
var URL = "http://jokes-plaul.rhcloud.com/api/joke";

function getJoke(callback) {
    request(URL, function (error, response, body) {
        if(error || response.statusCode >=400){
            return callback(error || body );
        }
        callback(null,JSON.parse(body));
    });
};

module.exports = {
    getJoke: getJoke
}

-----testJokeModule.js-----
var expect = require("chai").expect;
var jokes = require("../jokeModule");
var nock = require("nock");
var testJoke = {"id": 1234, "joke": "ha ha ha", "reference": "unknown"};

var n = nock('http://jokes-plaul.rhcloud.com');


//Mock is created here.
describe('Joke API Get', function () {
    before(function (done) {
        n.get('/api/joke')
            .reply(200,testJoke );
        done();
    });

    it('Should fetch a joke', function (done) {
        jokes.getJoke(function (err, joke) {
            if (err) {
                throw err;
            }
            expect(joke.reference).to.be.equal("unknown");
            expect(joke).to.be.eql(testJoke);
            done();
        })
    });
});









